<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/rutaculturalar/ARViewActivity.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/rutaculturalar/ARViewActivity.java" />
              <option name="originalContent" value="package com.example.rutaculturalar;&#10;&#10;import android.net.Uri;&#10;import android.os.Bundle;&#10;import android.view.MotionEvent;&#10;import android.widget.Toast;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;import com.google.ar.core.HitResult;&#10;import com.google.ar.core.Plane;&#10;import com.google.ar.sceneform.AnchorNode;&#10;import com.google.ar.sceneform.math.Vector3;&#10;import com.google.ar.sceneform.rendering.ModelRenderable;&#10;import com.google.ar.sceneform.ux.ArFragment;&#10;import com.google.ar.sceneform.ux.TransformableNode;&#10;&#10;public class ARViewActivity extends AppCompatActivity {&#10;&#10;    private ArFragment arFragment;&#10;    private ModelRenderable model;&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        setContentView(R.layout.activity_ar_view);&#10;&#10;        arFragment = (ArFragment) getSupportFragmentManager().findFragmentById(R.id.arFragment);&#10;&#10;        // Carga el modelo 3D (.glb desde assets)&#10;        ModelRenderable.builder()&#10;                .setSource(this, Uri.parse(&quot;modelo.glb&quot;))&#10;                .setIsFilamentGltf(true)&#10;                .build()&#10;                .thenAccept(renderable -&gt; model = renderable)&#10;                .exceptionally(error -&gt; {&#10;                    Toast.makeText(this, &quot;Error cargando modelo&quot;, Toast.LENGTH_SHORT).show();&#10;                    return null;&#10;                });&#10;&#10;        arFragment.setOnTapArPlaneListener((HitResult hitResult, Plane plane, MotionEvent motionEvent) -&gt; {&#10;            if (model == null) return;&#10;&#10;            AnchorNode anchorNode = new AnchorNode(hitResult.createAnchor());&#10;            anchorNode.setParent(arFragment.getArSceneView().getScene());&#10;&#10;            TransformableNode modelNode = new TransformableNode(arFragment.getTransformationSystem());&#10;            modelNode.setParent(anchorNode);&#10;            modelNode.setRenderable(model);&#10;&#10;            // Limitar el rango de escala permitido por gestos&#10;            modelNode.getScaleController().setMinScale(0.05f);  // 1% del tamaño original&#10;            modelNode.getScaleController().setMaxScale(0.25f);  // 5%&#10;            modelNode.select();&#10;            // Establecer la escala después de select() para que no se sobrescriba&#10;            modelNode.setLocalScale(new Vector3(0.02f, 0.02f, 0.02f));&#10;&#10;&#10;        });&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.rutaculturalar;&#10;&#10;import android.net.Uri;&#10;import android.os.Bundle;&#10;import android.view.MotionEvent;&#10;import android.widget.Toast;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;import com.google.ar.core.HitResult;&#10;import com.google.ar.core.Plane;&#10;import com.google.ar.sceneform.AnchorNode;&#10;import com.google.ar.sceneform.math.Vector3;&#10;import com.google.ar.sceneform.rendering.ModelRenderable;&#10;import com.google.ar.sceneform.ux.ArFragment;&#10;import com.google.ar.sceneform.ux.TransformableNode;&#10;&#10;public class ARViewActivity extends AppCompatActivity {&#10;&#10;    private ArFragment arFragment;&#10;    private ModelRenderable model;&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        setContentView(R.layout.activity_ar_view);&#10;&#10;        arFragment = (ArFragment) getSupportFragmentManager().findFragmentById(R.id.arFragment);&#10;&#10;        // Carga el modelo 3D (.glb desde assets)&#10;        ModelRenderable.builder()&#10;                .setSource(this, Uri.parse(&quot;modelo.glb&quot;))&#10;                .setIsFilamentGltf(true)&#10;                .build()&#10;                .thenAccept(renderable -&gt; model = renderable)&#10;                .exceptionally(error -&gt; {&#10;                    Toast.makeText(this, &quot;Error cargando modelo&quot;, Toast.LENGTH_SHORT).show();&#10;                    return null;&#10;                });&#10;&#10;        arFragment.setOnTapArPlaneListener((HitResult hitResult, Plane plane, MotionEvent motionEvent) -&gt; {&#10;            if (model == null) return;&#10;&#10;            AnchorNode anchorNode = new AnchorNode(hitResult.createAnchor());&#10;            anchorNode.setParent(arFragment.getArSceneView().getScene());&#10;&#10;            TransformableNode modelNode = new TransformableNode(arFragment.getTransformationSystem());&#10;            modelNode.setParent(anchorNode);&#10;            modelNode.setRenderable(model);&#10;&#10;            // Limitar el rango de escala permitido por gestos&#10;            modelNode.getScaleController().setMinScale(0.05f);  // 1% del tamaño original&#10;            modelNode.getScaleController().setMaxScale(0.25f);  // 5%&#10;&#10;            // Configurar el controlador de rotación&#10;            RotationController rotCtrl = modelNode.getRotationController();&#10;            rotCtrl.setEnabled(true);               // ya viene en true por defecto&#10;            rotCtrl.setRotationRateDegrees(180f);   // velocidad de rotación (°/seg) opcional&#10;&#10;            modelNode.select();&#10;            // Establecer la escala después de select() para que no se sobrescriba&#10;            modelNode.setLocalScale(new Vector3(0.02f, 0.02f, 0.02f));&#10;&#10;&#10;        });&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>